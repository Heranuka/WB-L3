// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "wb-l3.7/internal/domain"
	jwt "wb-l3.7/pkg/jwt"
)

// MockServiceAuth is a mock of ServiceAuth interface.
type MockServiceAuth struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAuthMockRecorder
}

// MockServiceAuthMockRecorder is the mock recorder for MockServiceAuth.
type MockServiceAuthMockRecorder struct {
	mock *MockServiceAuth
}

// NewMockServiceAuth creates a new mock instance.
func NewMockServiceAuth(ctrl *gomock.Controller) *MockServiceAuth {
	mock := &MockServiceAuth{ctrl: ctrl}
	mock.recorder = &MockServiceAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAuth) EXPECT() *MockServiceAuthMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockServiceAuth) Login(ctx context.Context, nickname, password string) (*domain.Tokens, *domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, nickname, password)
	ret0, _ := ret[0].(*domain.Tokens)
	ret1, _ := ret[1].(*domain.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockServiceAuthMockRecorder) Login(ctx, nickname, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockServiceAuth)(nil).Login), ctx, nickname, password)
}

// Refresh mocks base method.
func (m *MockServiceAuth) Refresh(ctx context.Context, token string) (*domain.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, token)
	ret0, _ := ret[0].(*domain.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Refresh indicates an expected call of Refresh.
func (mr *MockServiceAuthMockRecorder) Refresh(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockServiceAuth)(nil).Refresh), ctx, token)
}

// Register mocks base method.
func (m *MockServiceAuth) Register(ctx context.Context, nickname, password string, roles []jwt.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, nickname, password, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockServiceAuthMockRecorder) Register(ctx, nickname, password, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServiceAuth)(nil).Register), ctx, nickname, password, roles)
}
