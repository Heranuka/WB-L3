// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_items is a generated GoMock package.
package mock_items

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "wb-l3.7/internal/domain"
)

// MockItemStorage is a mock of ItemStorage interface.
type MockItemStorage struct {
	ctrl     *gomock.Controller
	recorder *MockItemStorageMockRecorder
}

// MockItemStorageMockRecorder is the mock recorder for MockItemStorage.
type MockItemStorageMockRecorder struct {
	mock *MockItemStorage
}

// NewMockItemStorage creates a new mock instance.
func NewMockItemStorage(ctrl *gomock.Controller) *MockItemStorage {
	mock := &MockItemStorage{ctrl: ctrl}
	mock.recorder = &MockItemStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemStorage) EXPECT() *MockItemStorageMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockItemStorage) CreateItem(ctx context.Context, item *domain.Item) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", ctx, item)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemStorageMockRecorder) CreateItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemStorage)(nil).CreateItem), ctx, item)
}

// DeleteItem mocks base method.
func (m *MockItemStorage) DeleteItem(ctx context.Context, itemID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemStorageMockRecorder) DeleteItem(ctx, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemStorage)(nil).DeleteItem), ctx, itemID)
}

// GetAllItems mocks base method.
func (m *MockItemStorage) GetAllItems(ctx context.Context) ([]*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems", ctx)
	ret0, _ := ret[0].([]*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockItemStorageMockRecorder) GetAllItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockItemStorage)(nil).GetAllItems), ctx)
}

// GetItem mocks base method.
func (m *MockItemStorage) GetItem(ctx context.Context, itemID int64) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, itemID)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemStorageMockRecorder) GetItem(ctx, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemStorage)(nil).GetItem), ctx, itemID)
}

// UpdateItem mocks base method.
func (m *MockItemStorage) UpdateItem(ctx context.Context, item *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemStorageMockRecorder) UpdateItem(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemStorage)(nil).UpdateItem), ctx, item)
}

// MockHistoryStorage is a mock of HistoryStorage interface.
type MockHistoryStorage struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryStorageMockRecorder
}

// MockHistoryStorageMockRecorder is the mock recorder for MockHistoryStorage.
type MockHistoryStorageMockRecorder struct {
	mock *MockHistoryStorage
}

// NewMockHistoryStorage creates a new mock instance.
func NewMockHistoryStorage(ctrl *gomock.Controller) *MockHistoryStorage {
	mock := &MockHistoryStorage{ctrl: ctrl}
	mock.recorder = &MockHistoryStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryStorage) EXPECT() *MockHistoryStorageMockRecorder {
	return m.recorder
}

// GetItemHistory mocks base method.
func (m *MockHistoryStorage) GetItemHistory(ctx context.Context, itemID int64) ([]*domain.ItemHistoryRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemHistory", ctx, itemID)
	ret0, _ := ret[0].([]*domain.ItemHistoryRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemHistory indicates an expected call of GetItemHistory.
func (mr *MockHistoryStorageMockRecorder) GetItemHistory(ctx, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemHistory", reflect.TypeOf((*MockHistoryStorage)(nil).GetItemHistory), ctx, itemID)
}

// LogChange mocks base method.
func (m *MockHistoryStorage) LogChange(ctx context.Context, userID, itemID int64, changeDesc string, changeDiff map[string]domain.ChangeDiff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogChange", ctx, userID, itemID, changeDesc, changeDiff)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogChange indicates an expected call of LogChange.
func (mr *MockHistoryStorageMockRecorder) LogChange(ctx, userID, itemID, changeDesc, changeDiff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogChange", reflect.TypeOf((*MockHistoryStorage)(nil).LogChange), ctx, userID, itemID, changeDesc, changeDiff)
}
