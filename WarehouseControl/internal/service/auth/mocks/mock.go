// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "wb-l3.7/internal/domain"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserStorage) GetUser(ctx context.Context, nickname string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, nickname)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStorageMockRecorder) GetUser(ctx, nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStorage)(nil).GetUser), ctx, nickname)
}

// SaveUser mocks base method.
func (m *MockUserStorage) SaveUser(ctx context.Context, user *domain.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserStorageMockRecorder) SaveUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserStorage)(nil).SaveUser), ctx, user)
}

// MockTokensStorage is a mock of TokensStorage interface.
type MockTokensStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTokensStorageMockRecorder
}

// MockTokensStorageMockRecorder is the mock recorder for MockTokensStorage.
type MockTokensStorageMockRecorder struct {
	mock *MockTokensStorage
}

// NewMockTokensStorage creates a new mock instance.
func NewMockTokensStorage(ctrl *gomock.Controller) *MockTokensStorage {
	mock := &MockTokensStorage{ctrl: ctrl}
	mock.recorder = &MockTokensStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokensStorage) EXPECT() *MockTokensStorageMockRecorder {
	return m.recorder
}

// GetUserByRefreshToken mocks base method.
func (m *MockTokensStorage) GetUserByRefreshToken(ctx context.Context, refreshToken string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByRefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByRefreshToken indicates an expected call of GetUserByRefreshToken.
func (mr *MockTokensStorageMockRecorder) GetUserByRefreshToken(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByRefreshToken", reflect.TypeOf((*MockTokensStorage)(nil).GetUserByRefreshToken), ctx, refreshToken)
}

// StoreRefreshToken mocks base method.
func (m *MockTokensStorage) StoreRefreshToken(ctx context.Context, userID int64, refreshToken string, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", ctx, userID, refreshToken, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockTokensStorageMockRecorder) StoreRefreshToken(ctx, userID, refreshToken, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockTokensStorage)(nil).StoreRefreshToken), ctx, userID, refreshToken, expiresAt)
}
