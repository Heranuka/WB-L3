definitions:
  domain.ChangeDiff:
    properties:
      new:
        description: новое значение
      old:
        description: старое значение
    type: object
  domain.Item:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  domain.ItemHistoryRecord:
    properties:
      change_description:
        type: string
      change_diff:
        additionalProperties:
          $ref: '#/definitions/domain.ChangeDiff'
        description: ключ - название поля
        type: object
      changed_at:
        type: string
      changed_by_user:
        type: string
      id:
        type: integer
      item_id:
        type: integer
      version:
        type: integer
    type: object
  domain.Tokens:
    properties:
      access-token:
        type: string
      created_at:
        type: string
      expires_at:
        type: string
      id:
        description: bigint (bigserial) в базе
        format: int64
        type: integer
      refresh-token:
        type: string
      user_id:
        type: integer
    type: object
  domain.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      nickname:
        type: string
      password_hash:
        type: string
      roles:
        items:
          $ref: '#/definitions/jwt.Role'
        type: array
      updated_at:
        type: string
    type: object
  jwt.Role:
    enum:
    - admin
    - manager
    - viewer
    type: string
    x-enum-varnames:
    - Admin
    - Manager
    - Viewer
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Авторизация пользователя по никнейму и паролю, получение JWT токенов
      parameters:
      - description: 'Данные для входа: никнейм и пароль'
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Tokens'
        "401":
          description: Неверные учетные данные
          schema:
            type: string
        "500":
          description: Ошибка сервиса
          schema:
            type: string
      summary: Вход в систему
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновляет JWT и refresh токены по действующему refresh токену
      parameters:
      - description: Refresh токен
        in: body
        name: token
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Tokens'
        "401":
          description: Некорректный refresh токен
          schema:
            type: string
        "500":
          description: Ошибка при обновлении токенов
          schema:
            type: string
      summary: Обновление токенов
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Регистрация нового пользователя по никнейму и паролю
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная регистрация
          schema:
            type: string
        "400":
          description: Некорректные данные
          schema:
            type: string
        "500":
          description: Ошибка сервиса
          schema:
            type: string
      summary: Регистрация пользователя
      tags:
      - auth
  /items/create:
    post:
      consumes:
      - application/json
      description: Создает новый предмет и возвращает его ID
      parameters:
      - description: Данные нового предмета
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/domain.Item'
      produces:
      - application/json
      responses:
        "201":
          description: Успешное создание
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Некорректные данные
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервиса
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать новый предмет
      tags:
      - items
  /items/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет предмет по ID
      parameters:
      - description: ID предмета
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успехе
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Предмет не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервиса
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Удалить предмет
      tags:
      - items
  /items/getall:
    get:
      consumes:
      - application/json
      description: Возвращает список всех предметов
      produces:
      - application/json
      responses:
        "200":
          description: Массив предметов
          schema:
            items:
              $ref: '#/definitions/domain.Item'
            type: array
        "500":
          description: Ошибка сервиса
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить все предметы
      tags:
      - items
  /items/history/{id}:
    get:
      consumes:
      - application/json
      description: Возвращает историю изменений выбранного предмета
      parameters:
      - description: ID предмета
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.ItemHistoryRecord'
            type: array
        "404":
          description: История не найдена
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервиса
          schema:
            additionalProperties:
              type: string
            type: object
      summary: История изменений предмета
      tags:
      - items
  /items/update/{id}:
    put:
      consumes:
      - application/json
      description: Обновляет данные предмета по ID
      parameters:
      - description: ID предмета
        in: path
        name: id
        required: true
        type: integer
      - description: Обновленные данные предмета
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/domain.Item'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректные данные
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Предмет не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Ошибка сервиса
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновить предмет
      tags:
      - items
  /profile:
    get:
      consumes:
      - application/json
      description: Возвращает информацию о текущем пользователе по токену
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение профиля пользователя
      tags:
      - items
swagger: "2.0"
