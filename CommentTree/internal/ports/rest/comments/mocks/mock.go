// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_comments is a generated GoMock package.
package mocks

import (
	domain "commentTree/internal/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentHandler is a mock of CommentHandler interface.
type MockCommentHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCommentHandlerMockRecorder
}

// MockCommentHandlerMockRecorder is the mock recorder for MockCommentHandler.
type MockCommentHandlerMockRecorder struct {
	mock *MockCommentHandler
}

// NewMockCommentHandler creates a new mock instance.
func NewMockCommentHandler(ctrl *gomock.Controller) *MockCommentHandler {
	mock := &MockCommentHandler{ctrl: ctrl}
	mock.recorder = &MockCommentHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentHandler) EXPECT() *MockCommentHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentHandler) Create(ctx context.Context, comment *domain.Comment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, comment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentHandlerMockRecorder) Create(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentHandler)(nil).Create), ctx, comment)
}

// Delete mocks base method.
func (m *MockCommentHandler) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentHandlerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentHandler)(nil).Delete), ctx, id)
}

// GetChildComments mocks base method.
func (m *MockCommentHandler) GetChildComments(ctx context.Context, parentID int) ([]*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildComments", ctx, parentID)
	ret0, _ := ret[0].([]*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildComments indicates an expected call of GetChildComments.
func (mr *MockCommentHandlerMockRecorder) GetChildComments(ctx, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildComments", reflect.TypeOf((*MockCommentHandler)(nil).GetChildComments), ctx, parentID)
}

// GetRootComments mocks base method.
func (m *MockCommentHandler) GetRootComments(ctx context.Context, search *string, limit, offset int) ([]*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootComments", ctx, search, limit, offset)
	ret0, _ := ret[0].([]*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootComments indicates an expected call of GetRootComments.
func (mr *MockCommentHandlerMockRecorder) GetRootComments(ctx, search, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootComments", reflect.TypeOf((*MockCommentHandler)(nil).GetRootComments), ctx, search, limit, offset)
}

func (m *MockCommentHandler) GetAllComments(ctx context.Context) ([]domain.CommentNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComments", ctx)
	ret0, _ := ret[0].([]domain.CommentNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockCommentHandlerMockRecorder) GetAllComments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComments", reflect.TypeOf((*MockCommentHandler)(nil).GetAllComments), ctx)
}
