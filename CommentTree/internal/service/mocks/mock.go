// Code generated by MockGen. DO NOT EDIT.
// Source: comments.go

// Package mock_service is a generated GoMock package.
package mocks

import (
	domain "commentTree/internal/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentService is a mock of CommentService interface.
type MockCommentService struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceMockRecorder
}

// MockCommentServiceMockRecorder is the mock recorder for MockCommentService.
type MockCommentServiceMockRecorder struct {
	mock *MockCommentService
}

// NewMockCommentService creates a new mock instance.
func NewMockCommentService(ctrl *gomock.Controller) *MockCommentService {
	mock := &MockCommentService{ctrl: ctrl}
	mock.recorder = &MockCommentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentService) EXPECT() *MockCommentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentService) Create(ctx context.Context, comment *domain.Comment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, comment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentServiceMockRecorder) Create(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentService)(nil).Create), ctx, comment)
}

// Delete mocks base method.
func (m *MockCommentService) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentService)(nil).Delete), ctx, id)
}

// GetChildComments mocks base method.
func (m *MockCommentService) GetChildComments(ctx context.Context, parentID int) ([]*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildComments", ctx, parentID)
	ret0, _ := ret[0].([]*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildComments indicates an expected call of GetChildComments.
func (mr *MockCommentServiceMockRecorder) GetChildComments(ctx, parentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildComments", reflect.TypeOf((*MockCommentService)(nil).GetChildComments), ctx, parentID)
}

// GetRootComments mocks base method.
func (m *MockCommentService) GetRootComments(ctx context.Context, search *string, limit, offset int) ([]*domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootComments", ctx, search, limit, offset)
	ret0, _ := ret[0].([]*domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootComments indicates an expected call of GetRootComments.
func (mr *MockCommentServiceMockRecorder) GetRootComments(ctx, search, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootComments", reflect.TypeOf((*MockCommentService)(nil).GetRootComments), ctx, search, limit, offset)
}
