// Code generated by MockGen. DO NOT EDIT.
// Source: url_shortener.go

// Package mock_url_shortener is a generated GoMock package.
package mock_url_shortener

import (
	context "context"
	reflect "reflect"
	domain "shortener/internal/domain"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key string, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key, dest)
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), ctx, key, value, expiration)
}

// MockShortLinkService is a mock of ShortLinkService interface.
type MockShortLinkService struct {
	ctrl     *gomock.Controller
	recorder *MockShortLinkServiceMockRecorder
}

// MockShortLinkServiceMockRecorder is the mock recorder for MockShortLinkService.
type MockShortLinkServiceMockRecorder struct {
	mock *MockShortLinkService
}

// NewMockShortLinkService creates a new mock instance.
func NewMockShortLinkService(ctrl *gomock.Controller) *MockShortLinkService {
	mock := &MockShortLinkService{ctrl: ctrl}
	mock.recorder = &MockShortLinkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortLinkService) EXPECT() *MockShortLinkServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockShortLinkService) Create(ctx context.Context, link *domain.ShortURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockShortLinkServiceMockRecorder) Create(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShortLinkService)(nil).Create), ctx, link)
}

// Get mocks base method.
func (m *MockShortLinkService) Get(ctx context.Context, shortURL string) (domain.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, shortURL)
	ret0, _ := ret[0].(domain.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockShortLinkServiceMockRecorder) Get(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockShortLinkService)(nil).Get), ctx, shortURL)
}

// MockClickService is a mock of ClickService interface.
type MockClickService struct {
	ctrl     *gomock.Controller
	recorder *MockClickServiceMockRecorder
}

// MockClickServiceMockRecorder is the mock recorder for MockClickService.
type MockClickServiceMockRecorder struct {
	mock *MockClickService
}

// NewMockClickService creates a new mock instance.
func NewMockClickService(ctrl *gomock.Controller) *MockClickService {
	mock := &MockClickService{ctrl: ctrl}
	mock.recorder = &MockClickServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClickService) EXPECT() *MockClickServiceMockRecorder {
	return m.recorder
}

// AggregateByDay mocks base method.
func (m *MockClickService) AggregateByDay(ctx context.Context, shortURL string) ([]domain.DayStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateByDay", ctx, shortURL)
	ret0, _ := ret[0].([]domain.DayStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateByDay indicates an expected call of AggregateByDay.
func (mr *MockClickServiceMockRecorder) AggregateByDay(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateByDay", reflect.TypeOf((*MockClickService)(nil).AggregateByDay), ctx, shortURL)
}

// AggregateByMonth mocks base method.
func (m *MockClickService) AggregateByMonth(ctx context.Context, shortURL string) ([]domain.MonthStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateByMonth", ctx, shortURL)
	ret0, _ := ret[0].([]domain.MonthStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateByMonth indicates an expected call of AggregateByMonth.
func (mr *MockClickServiceMockRecorder) AggregateByMonth(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateByMonth", reflect.TypeOf((*MockClickService)(nil).AggregateByMonth), ctx, shortURL)
}

// AggregateByUserAgent mocks base method.
func (m *MockClickService) AggregateByUserAgent(ctx context.Context, shortURL string) ([]domain.UserAgentStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateByUserAgent", ctx, shortURL)
	ret0, _ := ret[0].([]domain.UserAgentStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateByUserAgent indicates an expected call of AggregateByUserAgent.
func (mr *MockClickServiceMockRecorder) AggregateByUserAgent(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateByUserAgent", reflect.TypeOf((*MockClickService)(nil).AggregateByUserAgent), ctx, shortURL)
}

// Save mocks base method.
func (m *MockClickService) Save(ctx context.Context, click *domain.Click) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, click)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockClickServiceMockRecorder) Save(ctx, click interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockClickService)(nil).Save), ctx, click)
}
