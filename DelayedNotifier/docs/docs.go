// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/notify/all": {
            "get": {
                "description": "Get a list of all notifications",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get all notifications",
                "responses": {
                    "200": {
                        "description": "List of notifications",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/domain.Notification"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notify/cancel/{id}": {
            "delete": {
                "description": "Cancel notification identified by UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Cancel (delete) a notification by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cancel confirmation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/domain.CancelResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request or not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notify/create": {
            "post": {
                "description": "Create a notification with message, channel, destination, and delivery time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Create a new notification",
                "parameters": [
                    {
                        "description": "Notification request body",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/noteAuth.RequestNote"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created notification",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/domain.Notification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, validation errors",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/notify/status/{id}": {
            "get": {
                "description": "Retrieve status of a notification by its UUID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get notification status by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Status response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/domain.StatusResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request or not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.CancelResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "note_id": {
                    "type": "string"
                }
            }
        },
        "domain.Notification": {
            "type": "object",
            "properties": {
                "channel": {
                    "description": "через какой канал",
                    "allOf": [
                        {
                            "$ref": "#/definitions/domain.NotificationChannel"
                        }
                    ]
                },
                "created_at": {
                    "type": "string"
                },
                "data_sent_at": {
                    "type": "string"
                },
                "destination": {
                    "description": "куда отправлять (email, telegram username, телефон)",
                    "type": "string"
                },
                "id": {
                    "description": "уникальный ID",
                    "type": "string"
                },
                "message": {
                    "description": "текст уведомления",
                    "type": "string"
                },
                "status": {
                    "description": "текущий статус",
                    "allOf": [
                        {
                            "$ref": "#/definitions/domain.NotificationStatus"
                        }
                    ]
                }
            }
        },
        "domain.NotificationChannel": {
            "type": "string",
            "enum": [
                "email",
                "telegram",
                "sms"
            ],
            "x-enum-varnames": [
                "ChannelEmail",
                "ChannelTelegram",
                "ChannelSMS"
            ]
        },
        "domain.NotificationStatus": {
            "type": "string",
            "enum": [
                "created",
                "pending",
                "sent",
                "failed",
                "canceled"
            ],
            "x-enum-varnames": [
                "StatusCreated",
                "StatusPending",
                "StatusSent",
                "StatusFailed",
                "StatusCanceled"
            ]
        },
        "domain.StatusResponse": {
            "type": "object",
            "properties": {
                "note_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "noteAuth.RequestNote": {
            "type": "object",
            "properties": {
                "channel": {
                    "$ref": "#/definitions/domain.NotificationChannel"
                },
                "data_sent_at": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
