// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_noteAuth is a generated GoMock package.
package mock_noteAuth

import (
	context "context"
	domain "delay/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockNotificationHandler is a mock of NotificationHandler interface.
type MockNotificationHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationHandlerMockRecorder
}

// MockNotificationHandlerMockRecorder is the mock recorder for MockNotificationHandler.
type MockNotificationHandlerMockRecorder struct {
	mock *MockNotificationHandler
}

// NewMockNotificationHandler creates a new mock instance.
func NewMockNotificationHandler(ctrl *gomock.Controller) *MockNotificationHandler {
	mock := &MockNotificationHandler{ctrl: ctrl}
	mock.recorder = &MockNotificationHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationHandler) EXPECT() *MockNotificationHandlerMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockNotificationHandler) Cancel(ctx context.Context, noteID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, noteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockNotificationHandlerMockRecorder) Cancel(ctx, noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockNotificationHandler)(nil).Cancel), ctx, noteID)
}

// Create mocks base method.
func (m *MockNotificationHandler) Create(ctx context.Context, notification *domain.Notification) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, notification)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNotificationHandlerMockRecorder) Create(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationHandler)(nil).Create), ctx, notification)
}

// GetAll mocks base method.
func (m *MockNotificationHandler) GetAll(ctx context.Context) (*[]domain.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*[]domain.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockNotificationHandlerMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNotificationHandler)(nil).GetAll), ctx)
}

// Status mocks base method.
func (m *MockNotificationHandler) Status(ctx context.Context, noteID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx, noteID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockNotificationHandlerMockRecorder) Status(ctx, noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockNotificationHandler)(nil).Status), ctx, noteID)
}
