// Code generated by MockGen. DO NOT EDIT.
// Source: delay/internal/service/notificationService (interfaces: NotificationChannel)

// Package mocks is a generated GoMock package.
package mock_notifications

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationChannel is a mock of NotificationChannel interface.
type MockNotificationChannel struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationChannelMockRecorder
}

// MockNotificationChannelMockRecorder is the mock recorder for MockNotificationChannel.
type MockNotificationChannelMockRecorder struct {
	mock *MockNotificationChannel
}

// NewMockNotificationChannel creates a new mock instance.
func NewMockNotificationChannel(ctrl *gomock.Controller) *MockNotificationChannel {
	mock := &MockNotificationChannel{ctrl: ctrl}
	mock.recorder = &MockNotificationChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationChannel) EXPECT() *MockNotificationChannelMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockNotificationChannel) Send(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNotificationChannelMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationChannel)(nil).Send), arg0, arg1, arg2)
}
