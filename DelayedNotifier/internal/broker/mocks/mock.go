// Code generated by MockGen. DO NOT EDIT.
// Source: rabbit.go

// Package mock_broker is a generated GoMock package.
package mock_broker

import (
	context "context"
	domain "delay/internal/domain"
	notificationService "delay/internal/service/notificationService"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRabbit is a mock of Rabbit interface.
type MockRabbit struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMockRecorder
}

// MockRabbitMockRecorder is the mock recorder for MockRabbit.
type MockRabbitMockRecorder struct {
	mock *MockRabbit
}

// NewMockRabbit creates a new mock instance.
func NewMockRabbit(ctrl *gomock.Controller) *MockRabbit {
	mock := &MockRabbit{ctrl: ctrl}
	mock.recorder = &MockRabbitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbit) EXPECT() *MockRabbitMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockRabbit) Consume(ctx context.Context, emailChannel, telegramChannel notificationService.NotificationChannel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, emailChannel, telegramChannel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockRabbitMockRecorder) Consume(ctx, emailChannel, telegramChannel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockRabbit)(nil).Consume), ctx, emailChannel, telegramChannel)
}

// Publish mocks base method.
func (m *MockRabbit) Publish(note *domain.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitMockRecorder) Publish(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbit)(nil).Publish), note)
}

// UpdateStatus mocks base method.
func (m *MockRabbit) UpdateStatus(ctx context.Context, noteID uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, noteID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockRabbitMockRecorder) UpdateStatus(ctx, noteID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockRabbit)(nil).UpdateStatus), ctx, noteID, status)
}
